<SfDialog Width="250px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"> </DialogEvents>

    <DialogTemplates>
        <Header>@Title Doctor</Header>
        <Content>
            <EditForm Model="Doctor" Enhance OnSubmit="Save">
                 <div class="card border-success">
                     <div class="card-body">
                         <div class="form-group">
                             <label class="form-label">Emp Id</label>
                             <input @bind="Doctor.EmployeeId" class="form-control" disabled />
                         </div>
                         <div class="form-group">
                             <label class="form-label">Date</label>
                             <InputDate @bind-Value="Doctor.Date" class="form-control"></InputDate>
                         </div>
                         
                         <div class="form-group">
                             <label class="form-label">Medical Diagnose</label>
                             <InputDate @bind-Value="Doctor.MidicalDiagnose" class="form-control"></InputDate>
                         </div>
                         <div class="form-group">
                             <label class="form-label">Recommendation</label>
                             <InputDate @bind-Value="Doctor.MidicalRecommendation" class="form-control"></InputDate>
                         </div>
                    </div>

                </div>

            </EditForm>
        </Content>
    </DialogTemplates>

    <DialogButtons>
        <DialogButton Content="Save" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save"></DialogButton>
    </DialogButtons>

</SfDialog>

@code {
    public string Title { get; set; } = "Add";

    [Parameter] public Doctor Doctor { get; set; } = new();
    [Parameter] public EventCallback<Doctor> HandleSaveOperationEvent { get; set; } = new();
    public bool IsVisible { get; set; } = false;
    public async void Save() => await HandleSaveOperationEvent.InvokeAsync(Doctor);

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseDialog()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void ChangeTitle(string title) => Title = title;


}
