@implements IDisposable


@if (AllState.ShowCity)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Cities</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle"> Add City</i></button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">City</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Cities is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Cities)
                                        {


                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Name</td>
                                                <td>@item.Country!.Name</td>
                                                <td>
                                                    <i class=" bi bi-pencil text-info CoursorStyle" @onclick="()=>EditClicked(item)"></i>

                                                    <i class=" bi bi-trash text-danger CoursorStyle"  @onclick="()=>DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Department Added</div>
                                            </td>
                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

        </div>

    </div>
}

<CityDialoge @ref="CityDialoge" HandleSaveEvent="HandleSaveEvent"
                   City="City"
                   Countries="Countries" />

<style>
    .CoursorStyle {
        cursor: pointer;
    }
</style>


@code {
    CityDialoge? CityDialoge;
    City City = new();
    public string Title { get; set; } = "Add";
    public List<Country> Countries { get; set; } = new();
    public List<City> Cities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        AllState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await countryservice.GetAll(Constants.Country);
    }
    private async Task GetCities()
    {
        Cities = await cityservice.GetAll(Constants.city);
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }

    void OpenDialouge()
    {
        CityDialoge?.ShowDialog();
    }

    public async Task HandleSaveEvent(City City)
    {
        bool SuccessCheck = false;

        if (City.Id > 0)
        {
            var response = await cityservice.Update(City, Constants.city);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        else
        {
            var response = await cityservice.Insert(City, Constants.city);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        if (SuccessCheck)
        {
            City = new();
            await GetCities();
            CityDialoge?.ChangeTitle("Add");
        }
    }

    void AddButtonClicked()
    {
        CityDialoge?.ChangeTitle("Add");
        City = new();
        OpenDialouge();
    }

    private async Task DeleteClicked(City city)
    {
        bool confirm = await dialugeSer.ConfirmAsync($"Are you sure you wanna delete {city.Name} ", "Confirm delete");
        if (!confirm)
            return;
        var response = await cityservice.Delete(city.Id, Constants.city);
        if (await DisplayMessage(response.falg, response.Messaage))
            await GetCities();

    }

    private void EditClicked(City item)
    {
        CityDialoge?.ChangeTitle("Update");
        City = item;
        OpenDialouge();
    }

    public async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialugeSer.AlertAsync(message, "Success operation");
            return true;
        }
        else
        {
            await dialugeSer.AlertAsync(message, "Alert!");
            return false;
        }
    }
}
