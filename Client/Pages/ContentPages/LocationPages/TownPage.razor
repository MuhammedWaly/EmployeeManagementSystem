@implements IDisposable


@if (AllState.ShowTown)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Towns</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle"> Add Town</i></button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Town</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Action</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Towns is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Towns)
                                        {


                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Name</td>
                                                <td>@item.City!.Name</td>
                                                <td>
                                                    <i class=" bi bi-pencil text-info CoursorStyle"  @onclick="()=>EditClicked(item)"></i>

                                                    <i class=" bi bi-trash text-danger CoursorStyle" @onclick="()=>DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Towns Added</div>
                                            </td>
                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

        </div>

    </div>
}

<TownDialoge @ref="TownDialoge" HandleSaveEvent="HandleSaveEvent"
             Town="Town"
             Cities="Cities" />

<style>
    .CoursorStyle {
        cursor: pointer;
    }
</style>


@code {
    TownDialoge? TownDialoge;
    Town Town = new();
    public string Title { get; set; } = "Add";
    public List<City> Cities { get; set; } = new();
    public List<Town> Towns { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetTowns();
        AllState.Action += StateHasChanged;
    }

    private async Task GetTowns()
    {
        Towns = await townservice.GetAll(Constants.Town);
    }
    private async Task GetCities()
    {
        Cities = await cityservice.GetAll(Constants.city);
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }

    void OpenDialouge()
    {
        TownDialoge?.ShowDialog();
    }

    public async Task HandleSaveEvent(Town town)
    {
        bool SuccessCheck = false;

        if (town.Id > 0)
        {
            var response = await townservice.Update(town, Constants.Town);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        else
        {
            var response = await townservice.Insert(town, Constants.Town);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        if (SuccessCheck)
        {
            Town = new();
            await GetTowns();
            TownDialoge?.ChangeTitle("Add");
        }
    }

    void AddButtonClicked()
    {
        TownDialoge?.ChangeTitle("Add");
        Town = new();
        OpenDialouge();
    }

    private async Task DeleteClicked(Town town)
    {
        bool confirm = await dialugeSer.ConfirmAsync($"Are you sure you wanna delete {town.Name} ", "Confirm delete");
        if (!confirm)
            return;
        var response = await townservice.Delete(town.Id, Constants.Town);
        if (await DisplayMessage(response.falg, response.Messaage))
            await GetTowns();

    }

    private void EditClicked(Town item)
    {
        TownDialoge?.ChangeTitle("Update");
        Town = item;
        OpenDialouge();
    }

    public async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialugeSer.AlertAsync(message, "Success operation");
            return true;
        }
        else
        {
            await dialugeSer.AlertAsync(message, "Alert!");
            return false;
        }
    }
}
