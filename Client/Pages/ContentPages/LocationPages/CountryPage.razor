@implements IDisposable


@if (AllState.ShowCountry)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Countries</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialouge"><i class="bi bi-plus-circle"> Add Country</i></button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Countries)
                                        {


                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class=" bi bi-pencil text-info" id="CursorStyle" @onclick="()=>EditClicked(item)"></i>

                                                    <i class=" bi bi-trash text-danger" id="CursorStyle" @onclick="()=>DeleteClicked(item)"></i>

                                                </td>


                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Countries Added</div>
                                            </td>
                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

        </div>

    </div>
}

<CountryDialog @ref="countryDialog" HandleSaveEvent="HandleSaveEvent" Country="country"/>

<style>
    .CursorStyle {
        cursor: pointer;
    }
</style>


@code {
    CountryDialog? countryDialog;
    Country country = new();
    public string Title { get; set; } = "Add";
    public List<Country> Countries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        AllState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await countryservice.GetAll(Constants.Country);
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }

    void OpenDialouge()
    {
        countryDialog?.ShowDialog();
    }

    public async Task HandleSaveEvent(Country country)
    {
        bool SuccessCheck = false;

        if (country.Id > 0)
        {
            var response = await countryservice.Update(country, Constants.Country);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        else
        {
            var response = await countryservice.Insert(country, Constants.Country);
            SuccessCheck = await DisplayMessage(response.falg, response.Messaage);
        }
        if (SuccessCheck)
        {
            country = new();
            await GetCountries();
            countryDialog?.ChangeTitle("Add");
        }
    }

    private async Task DeleteClicked(Country country)
    {
        bool confirm = await dialugeSer.ConfirmAsync($"Are you sure you wanna delete {country.Name} ", "Confirm delete");
        if (!confirm)
            return;
        var response = await countryservice.Delete(country.Id, Constants.Country);
        if (await DisplayMessage(response.falg, response.Messaage))
            await GetCountries();

    }

    private void EditClicked(Country item)
    {
        countryDialog?.ChangeTitle("Update");
        country = item;
        OpenDialouge();
    }

    public async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialugeSer.AlertAsync(message, "Success operation");
            return true;
        }
        else
        {
            await dialugeSer.AlertAsync(message, "Alert!");
            return false;
        }
    }
}